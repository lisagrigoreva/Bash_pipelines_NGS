
###Gene prediction

Reference-guided transcriptome assembly

Trinity genome guided assembly.
In comparison to genome-free de novo assembly, it can also help in cases where you have paralogs or other genes with shared sequences, since the genome is used to partition the reads according to locus prior to doing any de novo assembly.

1. Alignment reads to the reference genome (STAR)

```
./STAR/bin/Linux_x86_64/STAR --runMode genomeGenerate --genomeDir ./genome_assembly/ ./genome_assembly/ --genomeFastaFiles ./genome_assembly/assembly_guar_Masurca1.fasta   --genomeSAindexNbases 13

 for i in ./transcripotme/raw_reads/*.fq.gz; 
 do  ./STAR/bin/Linux_x86_64/STAR --runMode alignReads   --outSAMtype  BAM Unsorted  --outSAMmapqUnique 60  --runThreadN 30 --genomeDir   ./genome_assembly/ --genomeLoad  LoadAndKeep   --readFilesIn $i  --readFilesCommand zcat  --outFileNamePrefix ${i%.fq.gz}.bam; done

```
2. Merge obtained bam files 

```
samtools merge *.bam > merged.bam
samtools sort merged.bam > merged.sorted.bam
samtools index merged.sorted.bam
```



Sort
```
for f in *.bam; do  samtools sort -@ 7 $f   ${f%.bam}.sorted; done
```

bw depth
```
for i in *.sorted.bam ; do bamCoverage -b $i -o  ${i%.sorted.bam}.bw; done
```

	
2. TransDecoder identifies candidate coding regions within transcript sequences, such as those generated by de novo RNA-Seq transcript assembly using Trinity, or constructed based on RNA-Seq alignments to the genome using Tophat and Cufflinks.

Step1. Get long reading frames

```
TransDecoder.LongOrfs -t target_transcripts.fasta
```

Step2. Predict the likely coding regions 

```
TransDecoder.Predict -t target_transcripts.fasta
```

2. Evidencemodeler 

```


 /home/grigoriewa/wgs_2020/genome_annotation/programms/EVM_r03062010/EvmUtils/partition_EVM_inputs.pl --genome /home/grigoriewa/wgs_2020/genome_annotation/genome_assembly/assembly_guar_Masurca1.fasta --gene_predictions Trinity_est_filtered_genome_guided.fasta.transdecoder.gff3 --segmentSize 100000 --overlapSize 10000 --partition_listing partitions_list.out
 
/home/grigoriewa/wgs_2020/genome_annotation/programms/EVM_r03062010/EvmUtils/write_EVM_commands.pl --genome /home/grigoriewa/wgs_2020/genome_annotation/genome_assembly_masurca/assembly_guar_Masurca1.fasta --weights /home/grigoriewa/wgs_2020/genome_annotation/weights.txt --output_file_name evm.out  --partitions partitions_list.out --gene_predictions Trinity_est_filtered_genome_guided.fasta.transdecoder.gff3  >  commands.list
 
/home/grigoriewa/wgs_2020/genome_annotation/programms/EVM_r03062010/EvmUtils/execute  _EVM_commands.pl  commands.list | tee run.log
 
/home/grigoriewa/wgs_2020/genome_annotation/programms/EVM_r03062010/EvmUtils/recombine_EVM_partial_outputs.pl --partitions partitions_list.out --output_file_name evm.out
 
 /home/grigoriewa/wgs_2020/genome_annotation/programms/EVM_r03062010/EvmUtils/convert_EVM_outputs_to_GFF3.pl  --partitions partitions_list.out  --output_file_name evm.out --genome /home/grigoriewa/wgs_2020/genome_annotation/genome_assembly/assembly_guar_Masurca1.fasta
 
find . -regex ".*transdecoder.gff3" -exec cat {} \; > EVM.all.gff3
```
Get fasta:
```
bedtools getfasta -fi /home/grigoriewa/wgs_2020/genome_annotation/transcripotme/ref_gided/Trinity_est_filtered_genome_guided.fasta  -bed EVM.all.gff3 -fo models.fa
```
3. Blast

According to the article:

All gene models were aligned against the GenBank Non-Redundant, TrEMBL, Pfam, SwissProt, Gene Ontology (GO), and Kyoto Encyclopedia of Genes and Genomes (KEGG) databases. 


for GO and KEGG databases probably you can use:

https://github.com/eggnogdb/eggnog-mapper

Databases GO:
http://current.geneontology.org/annotations/index.html ?

Blast results for Pfam, SwissProt and Non-Redundant in folder blast


script:

```
#!/bin/bash
#SBATCH --job-name=blast
#SBATCH --nodes=1
#SBATCH --cpus-per-task=30
#SBATCH --time=250:00:00

#tblastx against swissprot db
blastx  -query  ../ref_gided/models.fa  -db ./swissprot_db/uniprot_sprot.fasta -evalue 1e-5  -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore"  -num_threads 32 -out transcriptome_vs_swissprot.tab

#blastx against pfam db 
blastx  -query  ../ref_gided/models.fa  -db ./pfam_db/Pfam-A.fasta  -evalue 1e-5  -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore"  -num_threads 32 -out transcriptome_vs_pfam.tab

#blastn against nr db
 blastn  -query ../ref_gided/models.fa  -db ./nr_db/nt  -evalue 1e-5  -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore"  -num_threads 32 -out transcriptome_vs_nr.tab
```
